//---------------------------------------------------------------------------//
//!
//! \file   MCPhoton.cpp
//! \author Luke Kersting
//! \brief  Monte Carlo Photon transport 
//!
//---------------------------------------------------------------------------//

// Define home directory
#define xstr(s) str(s)
#define str(s) #s

#include <fstream>
#include <cmath>
#include <cstring>
#include <iostream>
#include <cstdlib>
#include <ctime>
#include "PhotonTransport.hpp"
#include "PhotonScatter.hpp"
#include "Interpolate.hpp"
#include "RingDetector.hpp"


// Number of histogram bins
const int num_bins = 100;

// Ring radius [cm]
double ring_radius;

// X grad data
extern std::deque<double> X_data;

// S grid data
extern std::deque<double> S_data;

main () 
{
// Histogram of exiting photons energy spectrum
double hist[num_bins][2];

// Max photon histogram energy range [MeV]
double val_max = 1.0;

// Min photon histogram energy range [MeV]
double val_min = 0.0;

// Uniform histogram bin width
double bin_width = (val_max - val_min) / num_bins;

// Bin number of the data point
int bin_idx;

// Density of Iron (g/cm^3)
const double N_Fe = 55.845;

// Iron (Fe) absorption and total cross section data file [cm^2/g] (E in MeV)
std::string name = "/MCPhoton/data/Fe.txt";

// Material (Iron) S(x,z) data file name
std::string S_name = "/MCPhoton/data/S_Fe.txt";

// Histogram file name
std::string h_name = "/MCPhoton/histogram.txt";

// X & Y location file name
std::string xy_name = "/MCPhoton/location.txt";

// Full cross section data file path
std::string file = xstr(DIR) + name;

// Histogram output file path
std::string hist_name = xstr(DIR) + h_name;

// X & Y location output file path
std::string location_name = xstr(DIR) + xy_name;

// Full S file path
std::string filename = xstr(DIR) + S_name;

// Random number for interaction sampling
double rnd;

// Micro absorption cross section
double sigma_a;

// Micro total cross section
double sigma_t;

// Energy grid array
std::deque<double> E_data;

// Absorption X-section grid array
std::deque<double> a_data;

// Total X-section grid array
std::deque<double> t_data;

// Macro total cross section
double Sig_t;

// Current photon r location [cm]
double r[3];

// Current photon Orientation (u_x, u_y, u_z)
double u[3];	

// Current photon energy [MeV]
double E = 1.0;		// Initial energy

// Number of mean free paths in the shield thickness
double mfp = 10.0;

// Thickness of the iron shield
double thickness;

// Approximate attenuation
double Atten;

// Boolean variable for looping particle transport inside the shield
bool InShield;

// Number of reflected photons
int Reflected = 0;

// Number of transmitted photons
int Transmitted = 0;

// Number of photons absorbed
int Absorbed = 0;

// The scalar flux at the far end of the shield
float scalar_flux;

// Start and end times for timer
std::clock_t start, end;

// Run time duration
double duration;

// Number of photons being modeled 
int NumPhotons; 

// Buildup factor for 1 MeV photons in Iron
double buildup = 21.1;

srand( clock() );

//---------------------------------------------------------------------------//
// User inputs
//---------------------------------------------------------------------------//
// Input ring radius
std::cout << "Choose the ring radius [cm]: ";
std::cin >> ring_radius;

// Input # of photons to be modeled
std::cout << "Choose the number of photons to model (ie: 100000): ";
std::cin >> NumPhotons;

//---------------------------------------------------------------------------//
// End user inputs
//---------------------------------------------------------------------------//

// Start timer
start = std::clock();

// Extract S(x,z) data from the file
getDataFile2( filename, X_data, S_data );

// Extract cross section data from the file
getDataFile3( file, E_data, a_data, t_data );

// Get the initial micro total cross section
INTERPOLATOR3( E_data, a_data, t_data, E, sigma_a, sigma_t );

// Calculate initial macro total cross section
Sig_t = sigma_t*N_Fe;

// Calcaulate shield thickness (10 mfp)
thickness = mfp/Sig_t;

// Approximate attenuation
Atten = NumPhotons*buildup*exp(-10.0);
std::cout << "\n-------------------------------------------------\n" << 
"The approximate scalar flux was:\n" << Atten << " photons/cm\u00b2" << std::endl;

// Open final x, y location output file
std::ofstream locationxy;
locationxy.open(location_name,std::ofstream::out);

// Run Monte Carlo calculations for NumPhotons
for (int p = 0; p < NumPhotons; p++) {

	// Set initial photon location
	r[0] = r[1] = 0.0;
	r[2] = 0.0;

	// Set initial photon Orientation
	u[0] = u[1] = 0.0;
	u[2] = 1.0;

	// Set initial photon energy
	E = 1.0;

	// Loop while particle is inside the shield
	InShield = true;

	while (InShield) 
	{

		// Get Micro absorption and total cross section at current energy
		INTERPOLATOR3 ( E_data, a_data, t_data, E, sigma_a, sigma_t );


		// Sample for scattering or absorption
		rnd = std::rand()/(double)RAND_MAX;

		if ( rnd < sigma_a/sigma_t ) 
		{
			// Tally absorbed photons
			Absorbed++;

			// Exit inshield loop
			InShield = false;
		}	// End absorption loop
		
		else 
		{
			// Calculate Macro total cross scrtion
			Sig_t = sigma_t*N_Fe;
	
			// Sample the mean free path to next collision
			PhotonTransport ( r, u, Sig_t );

			// Sample the scatter orientation and new energy
			PhotonScatter ( u, E );

			if (r[2] <= 0.0){
				// Tally Reflected photons
				Reflected ++;
	
				// Exit inshield loop
				InShield = false;
			}
		
			else if (r[2] >= thickness){
				// Tally transmitted photons
				Transmitted ++;

				// Record final x and y location and cosine angle
				locationxy  << r[0] << "\t\t"
							<< r[1] << "\t\t"
							<< u[2] << std::endl;

				// Add the weighted crossing to the scalar flux
				scalar_flux += fabs(1.0/u[2]);

				// Find phton energy bin index
				bin_idx = (int)((E - val_min) / bin_width);

				// Put photon energy in the histogram bin
				hist[bin_idx][0]++;

				// Exit inshield loop
				InShield = false;
			}

		}	// End scattering loop

	}	// End of while inshield loop

}	// End of NumPhoton loop

locationxy.close();

// Normalize scalar flux to total number of photons modeled
scalar_flux /= NumPhotons;

// End timer
end = std::clock();

// Calculate total run time
duration = ( end - start )/(double) CLOCKS_PER_SEC; 

// Open histogram output file
std::ofstream histogram;
histogram.open(hist_name,std::ofstream::out);

// Histogram bin center value
histogram << " #\t\t E [MeV]" << std::endl;
for (int i = 0; i < num_bins; i++) {
	hist[i][1] = val_min + (i + 0.5)*bin_width;
    histogram << hist[i][0] << "\t\t" << hist[i][1] << std::endl;
}
histogram.close();

if (Transmitted > 0 )
{
	// Print scalar flux
	std::cout << "-------------------------------------------------\n" <<
	"The modeled scalar flux was:\n"<< scalar_flux << " 1/cm\u00b2\n" <<
	scalar_flux*NumPhotons << " photons/cm\u00b2\n";

	// Print ring flux
	Ring ( location_name, ring_radius, Transmitted, NumPhotons );

	// Print histogram location
	std::cout << "-------------------------------------------------\n" <<
	"Energy histogram outputted to:\n" << hist_name << std::endl;
}

// Print results
std::cout << "-------------------------------------------------\n" << 
Reflected << "\tPhotons Reflected\n" << 
Transmitted << "\tPhotons Transmitted (Current)\n" << 
Absorbed << "\tPhotons Absorbed\n"<<
Reflected + Transmitted + Absorbed << "\tTotal # of Photons\n"<<
"-------------------------------------------------" << std::endl;

// Print total run time
std::cout << "-------------------------------------------------\n" 
"Total run time was " << duration << " seconds\n" << std::endl;

}
